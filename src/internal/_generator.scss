@use 'sass:list';
@use 'config';
@use 'size';
@use 'mixins';

$default-prefix: 'u-';
$default-override: '';
$default-delimiter: '-';
$default-variant-delimiter: '\\:';

// ALL WIP
@mixin utility(
    $prefix: $default-prefix,
    $delimiter: $default-delimiter,
    $class-value-pairs,
    $variants: (),
    $variant-delimiter: $default-variant-delimiter,
    $generate-viewports: false,
    $override: $default-override
) {
    @include utility-with-body(
            $prefix,
            $class-value-pairs,
            $variants,
            $variant-delimiter,
            $generate-viewports,
            $override
        )
        using ($variant, $variant-delimiter, $prefix, $suffix, $key, $value, $override) {
        // TODO Handle portrait and landscape
        @if $variant == 'dark' or $variant == 'light' {
            $variant-prefix: '';
            $variant-suffix: '';
            @if $variant != '' {
                $variant-prefix: $variant + $variant-delimiter;
            }

            $suffix-str: '';
            @if $suffix != '' {
                $suffix-str: $delimiter + $suffix;
            }

            @media (prefers-color-scheme: #{$variant}) {
                .#{$variant-prefix}#{$prefix}#{$key}#{$suffix-str} {
                    @include mixins.explode-properties($value, $override);
                }
            }
        } @else if $variant == 'reduce-motion' {
            $variant-prefix: '';
            $variant-suffix: '';
            @if $variant != '' {
                $variant-prefix: $variant + $variant-delimiter;
            }

            $suffix-str: '';
            @if $suffix != '' {
                $suffix-str: $delimiter + $suffix;
            }

            @media (prefers-reduced-motion: reduce) {
                .#{$variant-prefix}#{$prefix}#{$key}#{$suffix-str} {
                    @include mixins.explode-properties($value, $override);
                }
            }
        } @else {
            $variant-prefix: '';
            $variant-suffix: '';
            @if $variant != '' {
                $variant-prefix: $variant + $variant-delimiter;
                $variant-suffix: ':' + $variant;
            }

            $suffix-str: '';
            @if $suffix != '' {
                $suffix-str: $delimiter + $suffix;
            }

            .#{$variant-prefix}#{$prefix}#{$key}#{$suffix-str}#{$variant-suffix} {
                @include mixins.explode-properties($value, $override);
            }
        }
    }
}

@mixin utility-with-body(
    $prefix: $default-prefix,
    $class-value-pairs,
    $variants: (),
    $variant-delimiter: $default-variant-delimiter,
    $generate-viewports: false,
    $override: $default-override
) {
    // Iterate over variants, including no variants
    $variants: list.join('', $variants);
    @each $key, $value in $class-value-pairs {
        @each $variant in $variants {
            // No viewport
            @content ($variant, $variant-delimiter, $prefix, '', $key, $value, $override);

            // Generate classes with viewport
            @if $generate-viewports == 'true' {
                @each $suffix, $limit in config.$breakpoint-pairs {
                    @include size.screen-above($limit) {
                        @content ($variant, $variant-delimiter, $prefix, $suffix, $key, $value, $override);
                    }
                }
            }
        }
    }
}
