@use 'sass:string';
@use 'sass:list';
@use '../../node_modules/sass-true/sass/config/throw';
@use '../../node_modules/sass-true/sass/true' as *;

@import 'config';

/*
  Functions
  TODO Refactor to different categories
*/

$DELIMETER: '-';

/*
    Converts a given hex value to RGB.
*/
@function hex-to-rgb($hex) {
    @return red($hex), green($hex), blue($hex);
}

/*
    Generates delimited class name prefix.
*/
@function delimitize($name) {
    @return $DELIMETER + $name + $DELIMETER;
}

/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
@function get-viewport-flag($name) {
    @if not map-has-key($viewport-flags, $name) {
        @return throw.error(
            $message: '[get-viewport-flag] Unknown constant `#{$name}`.',
            $source: 'get-viewport-flag()',
            $catch: true
        );
    }

    @return map-get($viewport-flags, $name);
}

@function string-split($string, $delimiter) {
    $result: ();

    // Find first occurence of delimiter
    $index: string.index($string, $delimiter);

    // Loop to parse string
    @while $index != null {
        // Get substring left of delimiter
        $substring: string.slice($string, 1, $index - 1);
        $result: append($result, $substring);

        // Remove delimiter from string
        $string: string.slice($string, $index + string.length($delimiter));

        // Find next delimiter
        $index: string.index($string, $delimiter);
    }

    // Add last substring to the result
    $result: append($result, $string);
    @return $result;
}

@function map-get-deep($map, $query) {
    $query-list: string-split($query, '.');

    $result: $map;
    @each $query in $query-list {
        $result: map-get-strict($result, $query);
    }

    @return $result;
}

@function map-get-strict($map, $key) {
    @if map-has-key($map, $key) {
        @return map-get($map, $key);
    } @else {
        @return throw.error(
            $message: 'ERROR: Specified key "#{$key}" does not exist in the mapping',
            $source: 'map-get-strict()',
            $catch: true
        );
    }
}

